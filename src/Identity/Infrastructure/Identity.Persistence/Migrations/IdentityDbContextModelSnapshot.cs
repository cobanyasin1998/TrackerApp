// <auto-generated />
using System;
using Identity.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Identity.Persistence.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    partial class IdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoreBase.Identity.Entities.Auth.AuthDefinitionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthFormEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthFormEntityId");

                    b.ToTable("AuthDefinitionEntity");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Auth.AuthFormEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthModuleEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthModuleEntityId");

                    b.ToTable("AuthFormEntity");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Auth.AuthModuleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AuthModuleEntity");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Auth.GroupAuthDefinitionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthDefinitionEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthDefinitionEntityId");

                    b.HasIndex("GroupEntityId");

                    b.ToTable("GroupAuthDefinitionEntity");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Base.GroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("GroupEntity");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Base.OrganizationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentOrganizationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentOrganizationId");

                    b.ToTable("OrganizationEntity");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Base.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationEntityId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationEntityId");

                    b.ToTable("UserEntities");

                    b.HasDiscriminator().HasValue("UserEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Base.UserGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("UserGroupEntity");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Identity.RefreshTokenEntity", b =>
                {
                    b.HasBaseType("CoreBase.Identity.Entities.Base.UserEntity");

                    b.Property<long?>("UserEntityId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserEntityId");

                    b.HasDiscriminator().HasValue("RefreshTokenEntity");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Auth.AuthDefinitionEntity", b =>
                {
                    b.HasOne("CoreBase.Identity.Entities.Auth.AuthFormEntity", "AuthFormEntity")
                        .WithMany("AuthDefinitionEntities")
                        .HasForeignKey("AuthFormEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthFormEntity");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Auth.AuthFormEntity", b =>
                {
                    b.HasOne("CoreBase.Identity.Entities.Auth.AuthModuleEntity", "AuthModuleEntity")
                        .WithMany("AuthFormEntities")
                        .HasForeignKey("AuthModuleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthModuleEntity");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Auth.GroupAuthDefinitionEntity", b =>
                {
                    b.HasOne("CoreBase.Identity.Entities.Auth.AuthDefinitionEntity", "AuthDefinitionEntity")
                        .WithMany("GroupAuthDefinitionEntities")
                        .HasForeignKey("AuthDefinitionEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreBase.Identity.Entities.Base.GroupEntity", "GroupEntity")
                        .WithMany("GroupAuthDefinitionEntities")
                        .HasForeignKey("GroupEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthDefinitionEntity");

                    b.Navigation("GroupEntity");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Base.OrganizationEntity", b =>
                {
                    b.HasOne("CoreBase.Identity.Entities.Base.OrganizationEntity", "ParentOrganization")
                        .WithMany("ChildOrganizations")
                        .HasForeignKey("ParentOrganizationId");

                    b.Navigation("ParentOrganization");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Base.UserEntity", b =>
                {
                    b.HasOne("CoreBase.Identity.Entities.Base.OrganizationEntity", "OrganizationEntity")
                        .WithMany("UserEntities")
                        .HasForeignKey("OrganizationEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationEntity");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Base.UserGroupEntity", b =>
                {
                    b.HasOne("CoreBase.Identity.Entities.Base.GroupEntity", "GroupEntity")
                        .WithMany("UserGroupEntities")
                        .HasForeignKey("GroupEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreBase.Identity.Entities.Base.UserEntity", "UserEntity")
                        .WithMany("UserGroupEntities")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Identity.RefreshTokenEntity", b =>
                {
                    b.HasOne("CoreBase.Identity.Entities.Base.UserEntity", null)
                        .WithMany("RefreshTokenEntities")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Auth.AuthDefinitionEntity", b =>
                {
                    b.Navigation("GroupAuthDefinitionEntities");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Auth.AuthFormEntity", b =>
                {
                    b.Navigation("AuthDefinitionEntities");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Auth.AuthModuleEntity", b =>
                {
                    b.Navigation("AuthFormEntities");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Base.GroupEntity", b =>
                {
                    b.Navigation("GroupAuthDefinitionEntities");

                    b.Navigation("UserGroupEntities");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Base.OrganizationEntity", b =>
                {
                    b.Navigation("ChildOrganizations");

                    b.Navigation("UserEntities");
                });

            modelBuilder.Entity("CoreBase.Identity.Entities.Base.UserEntity", b =>
                {
                    b.Navigation("RefreshTokenEntities");

                    b.Navigation("UserGroupEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
